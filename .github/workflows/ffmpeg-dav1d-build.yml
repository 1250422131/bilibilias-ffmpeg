name: Build FFmpeg for Android (multi-ABI, API 34, shared)

on:
  workflow_dispatch:
    inputs:
      ffmpeg-tag:
        description: "FFmpeg git tag (e.g. n7.1.1)"
        required: true
        default: "n7.1.1"
      ndk-version:
        description: "Android NDK version (e.g. r27)"
        required: true
        default: "r27"
      dav1d-tag:
        description: "dav1d git tag (e.g. 1.4.2). Use 'latest' to auto-pick the latest tag."
        required: true
        default: "latest"

jobs:
  build:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        abi: [arm64-v8a, armeabi-v7a, x86_64]
    env:
      API_LEVEL: 34
    steps:
      - name: Checkout workflow files
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y \
            git wget unzip build-essential pkg-config yasm nasm meson ninja-build \
            libc6:i386 libstdc++6:i386 lib32z1 gcc-multilib g++-multilib

      - name: Download Android NDK
        run: |
          wget -q https://dl.google.com/android/repository/android-ndk-${{ github.event.inputs.ndk-version || 'r27' }}-linux.zip
          unzip -q -o android-ndk-${{ github.event.inputs.ndk-version || 'r27' }}-linux.zip
          echo "ANDROID_NDK_VERSION=${{ github.event.inputs.ndk-version || 'r27' }}" >> $GITHUB_ENV
          echo "NDK=$PWD/android-ndk-${{ github.event.inputs.ndk-version || 'r27' }}" >> $GITHUB_ENV

      - name: Clone FFmpeg from official repository
        run: |
          git clone https://github.com/FFmpeg/FFmpeg ffmpeg-src
          cd ffmpeg-src
          git fetch --tags
          git checkout ${{ github.event.inputs.ffmpeg-tag || 'n7.1.1' }}

      - name: Clone dav1d
        run: |
          git clone https://code.videolan.org/videolan/dav1d.git dav1d-src
          cd dav1d-src
          if [ "${{ github.event.inputs.dav1d-tag }}" = "latest" ]; then
            # checkout latest tag
            latest_tag="$(git describe --tags `git rev-list --tags --max-count=1`)"
            echo "Using dav1d tag: $latest_tag"
            git checkout "$latest_tag"
          else
            git fetch --tags
            git checkout "${{ github.event.inputs.dav1d-tag }}"
          fi

      - name: Set up toolchain and env for ${{ matrix.abi }}
        run: |
          NDK=$PWD/android-ndk-${{ github.event.inputs.ndk-version || 'r27' }}
          TOOLCHAIN=$NDK/toolchains/llvm/prebuilt/linux-x86_64
          case "${{ matrix.abi }}" in
            arm64-v8a)
              export ARCH=arm64
              export CPU=armv8-a
              export CPU_FAMILY=aarch64
              export CROSS_PREFIX=$TOOLCHAIN/bin/aarch64-linux-android-
              export CC=$TOOLCHAIN/bin/aarch64-linux-android${API_LEVEL}-clang
              export AR=$TOOLCHAIN/bin/llvm-ar
              export RANLIB=$TOOLCHAIN/bin/llvm-ranlib
              export STRIP=$TOOLCHAIN/bin/llvm-strip
              ;;
            armeabi-v7a)
              export ARCH=arm
              export CPU=armv7-a
              export CPU_FAMILY=arm
              export CROSS_PREFIX=$TOOLCHAIN/bin/arm-linux-androideabi-
              export CC=$TOOLCHAIN/bin/armv7a-linux-androideabi${API_LEVEL}-clang
              export AR=$TOOLCHAIN/bin/llvm-ar
              export RANLIB=$TOOLCHAIN/bin/llvm-ranlib
              export STRIP=$TOOLCHAIN/bin/llvm-strip
              ;;
            x86_64)
              export ARCH=x86_64
              export CPU=x86-64
              export CPU_FAMILY=x86_64
              export CROSS_PREFIX=$TOOLCHAIN/bin/x86_64-linux-android-
              export CC=$TOOLCHAIN/bin/x86_64-linux-android${API_LEVEL}-clang
              export AR=$TOOLCHAIN/bin/llvm-ar
              export RANLIB=$TOOLCHAIN/bin/llvm-ranlib
              export STRIP=$TOOLCHAIN/bin/llvm-strip
              ;;
          esac
          # Only enable NEON on ARM targets
          if [ "$ARCH" = "arm64" ] || [ "$ARCH" = "arm" ]; then
            echo "NEON_FLAG=--enable-neon" >> $GITHUB_ENV
          else
            echo "NEON_FLAG=" >> $GITHUB_ENV
          fi
          echo "ARCH=$ARCH" >> $GITHUB_ENV
          echo "CPU=$CPU" >> $GITHUB_ENV
          echo "CPU_FAMILY=$CPU_FAMILY" >> $GITHUB_ENV
          echo "CROSS_PREFIX=$CROSS_PREFIX" >> $GITHUB_ENV
          echo "CC=$CC" >> $GITHUB_ENV
          echo "AR=$AR" >> $GITHUB_ENV
          echo "RANLIB=$RANLIB" >> $GITHUB_ENV
          echo "STRIP=$STRIP" >> $GITHUB_ENV

      - name: Clean before configure
        working-directory: ffmpeg-src
        run: |
          make distclean || true
          git clean -xdf || true

      - name: Build dav1d for ${{ matrix.abi }} (shared, 16KB page size)
        env:
          ARCH: ${{ env.ARCH }}
          CPU_FAMILY: ${{ env.CPU_FAMILY }}
          CC: ${{ env.CC }}
          AR: ${{ env.AR }}
          STRIP: ${{ env.STRIP }}
        run: |
          PREFIX=$PWD/android-build/${{ matrix.abi }}
          mkdir -p "$PREFIX"
          cd dav1d-src

          # Create meson cross file
          cat > cross-${{ matrix.abi }}.ini <<EOF
[binaries]
c = '${CC}'
ar = '${AR}'
strip = '${STRIP}'
pkgconfig = 'pkg-config'
nasm = '/usr/bin/nasm'

[host_machine]
system = 'android'
cpu_family = '${CPU_FAMILY}'
cpu = '${CPU_FAMILY}'
endian = 'little'
EOF

          # Build and install
          export LDFLAGS="-Wl,-z,max-page-size=16384"
          meson setup build-${{ matrix.abi }} \
            --cross-file=cross-${{ matrix.abi }}.ini \
            --buildtype=release \
            --prefix="$PREFIX" \
            -Ddefault_library=shared \
            -Denable_tools=false \
            -Denable_tests=false \
            -Denable_examples=false
          ninja -C build-${{ matrix.abi }} -j"$(nproc)"
          ninja -C build-${{ matrix.abi }} install

      - name: Configure FFmpeg for ${{ matrix.abi }} (shared, 16KB page size, AV1 decode with libdav1d + MediaCodec)
        working-directory: ffmpeg-src
        env:
          ARCH: ${{ env.ARCH }}
          CPU: ${{ env.CPU }}
          CROSS_PREFIX: ${{ env.CROSS_PREFIX }}
          CC: ${{ env.CC }}
          AR: ${{ env.AR }}
          RANLIB: ${{ env.RANLIB }}
          STRIP: ${{ env.STRIP }}
          NEON_FLAG: ${{ env.NEON_FLAG }}
        run: |
          PREFIX=$PWD/../android-build/${{ matrix.abi }}
          export PKG_CONFIG_LIBDIR="$PREFIX/lib/pkgconfig"
          export PKG_CONFIG_PATH="$PKG_CONFIG_LIBDIR"

          ./configure \
            --prefix="$PREFIX" \
            --target-os=android \
            --arch=$ARCH \
            --cpu=$CPU \
            --cross-prefix=$CROSS_PREFIX \
            --cc=$CC \
            --ar=$AR \
            --ranlib=$RANLIB \
            --strip=$STRIP \
            --enable-cross-compile \
            --enable-shared \
            --disable-static \
            --disable-doc \
            --disable-programs \
            --enable-pic \
            --disable-debug \
            ${NEON_FLAG} \
            --enable-jni \
            --enable-mediacodec \
            --enable-libdav1d \
            --enable-decoder=av1 \
            --enable-decoder=av1_mediacodec \
            --enable-decoder=libdav1d \
            --enable-parser=av1 \
            --extra-ldflags="-Wl,-z,max-page-size=16384 -landroid -lmediandk"

      - name: Build FFmpeg for ${{ matrix.abi }}
        working-directory: ffmpeg-src
        run: |
          make -j$(nproc)
          make install

      - name: Copy config.h to output dir
        working-directory: ffmpeg-src
        run: cp config.h ../android-build/${{ matrix.abi }}/config.h

      - name: Upload ${{ matrix.abi }} build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-android-${{ matrix.abi }}
          path: android-build/${{ matrix.abi }}
