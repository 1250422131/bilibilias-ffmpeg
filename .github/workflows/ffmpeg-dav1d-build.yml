name: Build AV1 FFmpeg for Android (multi-ABI, shared, 16KB page)

on:
  workflow_dispatch:
    inputs:
      ffmpeg-tag:
        description: "FFmpeg git tag (e.g. n8.0)"
        required: true
        default: "n8.0"
      ndk-version:
        description: "Android NDK version (e.g. r27)"
        required: true
        default: "r27"
      min-api-level:
        description: "Min Android API level to build against (e.g. 26 for Android 8)"
        required: true
        default: "26"

jobs:
  build:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        abi: [arm64-v8a, armeabi-v7a, x86_64]
    env:
      MIN_API_LEVEL: ${{ github.event.inputs.min-api-level || '26' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y \
            git wget unzip build-essential pkg-config yasm nasm binutils \
            libc6:i386 libstdc++6:i386 lib32z1 gcc-multilib g++-multilib \
            cmake ninja-build meson
          nasm -v
          readelf --version
      - name: Download Android NDK
        run: |
          NDK_VER="${{ github.event.inputs.ndk-version || 'r27' }}"
          wget -q https://dl.google.com/android/repository/android-ndk-${NDK_VER}-linux.zip
          unzip -q -o android-ndk-${NDK_VER}-linux.zip
          echo "NDK=$PWD/android-ndk-${NDK_VER}" >> $GITHUB_ENV
          echo "ANDROID_NDK_VERSION=${NDK_VER}" >> $GITHUB_ENV
      - name: Clone FFmpeg
        run: |
          git clone https://github.com/FFmpeg/FFmpeg ffmpeg-src
          cd ffmpeg-src
          git fetch --tags
          git checkout ${{ github.event.inputs.ffmpeg-tag || 'n8.0' }}
          git rev-parse --short HEAD
      - name: Set up toolchain for ${{ matrix.abi }}
        run: |
          set -e
          NDK="$PWD/android-ndk-${{ github.event.inputs.ndk-version || 'r27' }}"
          TOOLCHAIN="$NDK/toolchains/llvm/prebuilt/linux-x86_64"
          case "${{ matrix.abi }}" in
            arm64-v8a)
              export ARCH=arm64
              export CPU=armv8-a
              export TARGET_HOST=aarch64-linux-android
              export CROSS_PREFIX="$TOOLCHAIN/bin/aarch64-linux-android-"
              export CC="$TOOLCHAIN/bin/aarch64-linux-android${MIN_API_LEVEL}-clang"
              ;;
            armeabi-v7a)
              export ARCH=arm
              export CPU=armv7-a
              export TARGET_HOST=armv7a-linux-androideabi
              export CROSS_PREFIX="$TOOLCHAIN/bin/arm-linux-androideabi-"
              export CC="$TOOLCHAIN/bin/armv7a-linux-androideabi${MIN_API_LEVEL}-clang"
              ;;
            x86_64)
              export ARCH=x86_64
              export CPU=x86-64
              export TARGET_HOST=x86_64-linux-android
              export CROSS_PREFIX="$TOOLCHAIN/bin/x86_64-linux-android-"
              export CC="$TOOLCHAIN/bin/x86_64-linux-android${MIN_API_LEVEL}-clang"
              ;;
          esac
          export AR="$TOOLCHAIN/bin/llvm-ar"
          export RANLIB="$TOOLCHAIN/bin/llvm-ranlib"
          export STRIP="$TOOLCHAIN/bin/llvm-strip"
          export NM="$TOOLCHAIN/bin/llvm-nm"
          export SYSROOT="$TOOLCHAIN/sysroot"
          # Isolate from host pkg-config to prevent accidental detection of host libs (like iconv)
          export PKG_CONFIG=/usr/bin/false
          export PKG_CONFIG_PATH=
          export PKG_CONFIG_LIBDIR=
          export PKG_CONFIG_SYSROOT_DIR=
          echo "ARCH=$ARCH" >> $GITHUB_ENV
          echo "CPU=$CPU" >> $GITHUB_ENV
          echo "TARGET_HOST=$TARGET_HOST" >> $GITHUB_ENV
          echo "CROSS_PREFIX=$CROSS_PREFIX" >> $GITHUB_ENV
          echo "CC=$CC" >> $GITHUB_ENV
          echo "AR=$AR" >> $GITHUB_ENV
          echo "RANLIB=$RANLIB" >> $GITHUB_ENV
          echo "STRIP=$STRIP" >> $GITHUB_ENV
          echo "NM=$NM" >> $GITHUB_ENV
          echo "SYSROOT=$SYSROOT" >> $GITHUB_ENV
          echo "PKG_CONFIG=$PKG_CONFIG" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=" >> $GITHUB_ENV
          echo "PKG_CONFIG_LIBDIR=" >> $GITHUB_ENV
          echo "PKG_CONFIG_SYSROOT_DIR=" >> $GITHUB_ENV
      - name: Clean before configure
        working-directory: ffmpeg-src
        run: |
          make distclean || true
          git clean -xdf || true
      - name: Build dav1d for ${{ matrix.abi }}
        run: |
          set -e
          DAV1D_VER=1.2.1
          mkdir -p deps && cd deps
          if [ ! -d dav1d ]; then
            git clone --branch $DAV1D_VER --depth 1 https://code.videolan.org/videolan/dav1d.git
          fi
          cd dav1d
          meson setup build --cross-file ../../ffmpeg-src/buildtools/meson/android-${{ matrix.abi }}.ini --prefix=$PWD/../../android-libs/${{ matrix.abi }} --libdir=lib --buildtype=release || true
          ninja -C build
          ninja -C build install
      - name: Build libaom for ${{ matrix.abi }}
        run: |
          set -e
          AOM_VER=v3.9.0
          mkdir -p deps && cd deps
          if [ ! -d aom ]; then
            git clone --branch $AOM_VER --depth 1 https://aomedia.googlesource.com/aom
          fi
          cd aom
          mkdir -p build && cd build
          cmake .. -DCMAKE_TOOLCHAIN_FILE=$NDK/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=${{ matrix.abi }} \
            -DANDROID_PLATFORM=android-${{ env.MIN_API_LEVEL }} \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=ON \
            -DCMAKE_INSTALL_PREFIX=$PWD/../../../android-libs/${{ matrix.abi }}
          make -j$(nproc)
          make install
      - name: Configure FFmpeg for ${{ matrix.abi }} (shared, disable iconv, 16KB page)
        working-directory: ffmpeg-src
        env:
          ARCH: ${{ env.ARCH }}
          CPU: ${{ env.CPU }}
          CROSS_PREFIX: ${{ env.CROSS_PREFIX }}
          CC: ${{ env.CC }}
          AR: ${{ env.AR }}
          RANLIB: ${{ env.RANLIB }}
          STRIP: ${{ env.STRIP }}
          NM: ${{ env.NM }}
          SYSROOT: ${{ env.SYSROOT }}
          PKG_CONFIG: ${{ env.PKG_CONFIG }}
          PKG_CONFIG_PATH: ${{ env.PKG_CONFIG_PATH }}
          PKG_CONFIG_LIBDIR: ${{ env.PKG_CONFIG_LIBDIR }}
          PKG_CONFIG_SYSROOT_DIR: ${{ env.PKG_CONFIG_SYSROOT_DIR }}
        run: |
          set -e
          mkdir -p ../android-build/${{ matrix.abi }}
          ac_cv_func_glob=no ./configure \
            --prefix="$PWD/../android-build/${{ matrix.abi }}" \
            --target-os=android \
            --arch="$ARCH" \
            --cpu="$CPU" \
            --cross-prefix="$CROSS_PREFIX" \
            --cc="$CC" \
            --ar="$AR" \
            --ranlib="$RANLIB" \
            --strip="$STRIP" \
            --nm="$NM" \
            --enable-cross-compile \
            --enable-shared \
            --disable-static \
            --disable-doc \
            --disable-programs \
            --enable-pic \
            --disable-debug \
            --disable-iconv \
            --enable-libaom \
            --enable-libdav1d \
            --pkg-config=false \
            $( [ "$ARCH" = "arm64" -o "$ARCH" = "arm" ] && echo "--enable-neon" ) \
            --extra-cflags="--sysroot=$SYSROOT -I$PWD/../android-libs/${{ matrix.abi }}/include" \
            --extra-ldflags="--sysroot=$SYSROOT -L$PWD/../android-libs/${{ matrix.abi }}/lib -Wl,-z,max-page-size=16384 -Wl,--no-undefined"
      - name: Build FFmpeg for ${{ matrix.abi }}
        working-directory: ffmpeg-src
        run: |
          set -e
          make -j"$(nproc)"
          make install V=1
      - name: Verify no iconv references remain
        run: |
          set -e
          so_dir="android-build/${{ matrix.abi }}/lib"
          test -d "$so_dir"
          for so in "$so_dir"/*.so; do
            echo "Checking undefined iconv symbols in: $so"
            if readelf -Ws "$so" | grep -E "UND.*iconv_"; then
              echo "Error: $so still references iconv_* symbols"
              exit 1
            fi
          done
          echo "OK: No iconv references found."
      - name: Copy config.h to output dir
        working-directory: ffmpeg-src
        run: |
          cp -v config.h ../android-build/${{ matrix.abi }}/config.h
      - name: Upload ${{ matrix.abi }} build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-android-${{ matrix.abi }}-api${{ env.MIN_API_LEVEL }}
          path: android-build/${{ matrix.abi }}
