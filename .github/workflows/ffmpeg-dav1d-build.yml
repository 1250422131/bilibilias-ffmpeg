name: Build FFmpeg Android (dav1d AV1 decode)

on:
  workflow_dispatch:
    inputs:
      ffmpeg-tag:
        description: "FFmpeg git tag (e.g. n8.0)"
        required: true
        default: "n8.0"
      ndk-version:
        description: "Android NDK version (e.g. r27)"
        required: true
        default: "r27"
      min-api-level:
        description: "Min Android API level"
        required: true
        default: "26"

jobs:
  build:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        abi: [arm64-v8a, armeabi-v7a, x86_64]

    env:
      MIN_API_LEVEL: ${{ github.event.inputs.min-api-level || '26' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install deps
        run: |
          set -e
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y git wget unzip build-essential pkg-config yasm nasm binutils \
            libc6:i386 libstdc++6:i386 lib32z1 gcc-multilib g++-multilib ninja-build meson python3
          nasm -v
          meson --version
          ninja --version

      - name: Download NDK
        run: |
          set -e
          NDK_VER="${{ github.event.inputs.ndk-version || 'r27' }}"
          wget -q https://dl.google.com/android/repository/android-ndk-${NDK_VER}-linux.zip
          unzip -q -o android-ndk-${NDK_VER}-linux.zip
          echo "NDK=$PWD/android-ndk-${NDK_VER}" >> $GITHUB_ENV

      - name: Clone FFmpeg
        run: |
          set -e
          git clone https://github.com/FFmpeg/FFmpeg ffmpeg-src
          cd ffmpeg-src
          git fetch --tags
          git checkout ${{ github.event.inputs.ffmpeg-tag || 'n8.0' }}

      - name: Setup toolchain (${{ matrix.abi }})
        run: |
          set -e
          NDK="$PWD/android-ndk-${{ github.event.inputs.ndk-version || 'r27' }}"
          TOOLCHAIN="$NDK/toolchains/llvm/prebuilt/linux-x86_64"
          case "${{ matrix.abi }}" in
            arm64-v8a)
              ARCH=arm64; CPU=armv8-a; CROSS_PREFIX="$TOOLCHAIN/bin/aarch64-linux-android-"; CC="$TOOLCHAIN/bin/aarch64-linux-android${MIN_API_LEVEL}-clang"; CFLAGS_ABI="-march=armv8-a"
              ;;
            armeabi-v7a)
              ARCH=arm; CPU=armv7-a; CROSS_PREFIX="$TOOLCHAIN/bin/arm-linux-androideabi-"; CC="$TOOLCHAIN/bin/armv7a-linux-androideabi${MIN_API_LEVEL}-clang"; CFLAGS_ABI="-march=armv7-a -mfpu=neon -mfloat-abi=softfp"
              ;;
            x86_64)
              ARCH=x86_64; CPU=x86-64; CROSS_PREFIX="$TOOLCHAIN/bin/x86_64-linux-android-"; CC="$TOOLCHAIN/bin/x86_64-linux-android${MIN_API_LEVEL}-clang"; CFLAGS_ABI="-march=x86-64"
              ;;
          esac
          echo "ARCH=$ARCH" >> $GITHUB_ENV
          echo "CPU=$CPU" >> $GITHUB_ENV
          echo "CROSS_PREFIX=$CROSS_PREFIX" >> $GITHUB_ENV
          echo "CC=$CC" >> $GITHUB_ENV
          echo "AR=$TOOLCHAIN/bin/llvm-ar" >> $GITHUB_ENV
          echo "RANLIB=$TOOLCHAIN/bin/llvm-ranlib" >> $GITHUB_ENV
          echo "STRIP=$TOOLCHAIN/bin/llvm-strip" >> $GITHUB_ENV
          echo "NM=$TOOLCHAIN/bin/llvm-nm" >> $GITHUB_ENV
          echo "SYSROOT=$TOOLCHAIN/sysroot" >> $GITHUB_ENV
          echo "CFLAGS_ABI=$CFLAGS_ABI" >> $GITHUB_ENV
          echo "PKG_CONFIG=/usr/bin/false" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=" >> $GITHUB_ENV
          echo "PKG_CONFIG_LIBDIR=" >> $GITHUB_ENV
          echo "PKG_CONFIG_SYSROOT_DIR=" >> $GITHUB_ENV

      - name: Build dav1d (${{ matrix.abi }})
        env:
          ARCH: ${{ env.ARCH }}
          CPU: ${{ env.CPU }}
          CC: ${{ env.CC }}
          AR: ${{ env.AR }}
          RANLIB: ${{ env.RANLIB }}
          STRIP: ${{ env.STRIP }}
          SYSROOT: ${{ env.SYSROOT }}
          CFLAGS_ABI: ${{ env.CFLAGS_ABI }}
        run: |
          set -e
          DAV1D_VERSION=1.4.3
          if [ ! -d dav1d ]; then
            git clone https://code.videolan.org/videolan/dav1d.git
          fi
          cd dav1d
          git fetch --tags
          git checkout "tags/$DAV1D_VERSION"
          # 生成 cross file
          cat > cross-${{ matrix.abi }}.ini <<EOF
          [host_machine]
          system = 'android'
          cpu_family = '${ARCH}'
          cpu = '${CPU}'
          endian = 'little'

          [binaries]
          c = '${CC}'
          ar = '${AR}'
          strip = '${STRIP}'
          pkgconfig = '/usr/bin/false'

          [properties]
          needs_exe_wrapper = true
          sys_root = '${SYSROOT}'
          c_args = ['--sysroot=${SYSROOT}', '${CFLAGS_ABI}']
          c_link_args = ['--sysroot=${SYSROOT}']

          [paths]
          prefix = '$GITHUB_WORKSPACE/dav1d/install-${{ matrix.abi }}'
          libdir = 'lib'
          EOF
          echo "=== cross file ==="
          sed 's/^/| /' cross-${{ matrix.abi }}.ini
          meson setup build-${{ matrix.abi }} \
            --cross-file cross-${{ matrix.abi }}.ini \
            --prefix "$GITHUB_WORKSPACE/dav1d/install-${{ matrix.abi }}" \
            --libdir lib \
            --buildtype release \
            -Ddefault_library=static \
            -Denable_tests=false \
            -Denable_tools=false \
            -Denable_asm=true
          ninja -C build-${{ matrix.abi }}
          ninja -C build-${{ matrix.abi }} install
          ls -l "$GITHUB_WORKSPACE/dav1d/install-${{ matrix.abi }}/lib"

      - name: Clean FFmpeg tree
        working-directory: ffmpeg-src
        run: |
          set -e
          make distclean || true
          git clean -xdf || true

      - name: Configure FFmpeg (${{ matrix.abi }})
        working-directory: ffmpeg-src
        run: |
          set -e
          DAV1D_PREFIX="$GITHUB_WORKSPACE/dav1d/install-${{ matrix.abi }}"
          EXTRA_NEON=""
            # ARCH 来自上一步写入的环境变量
          if [ "${ARCH}" = "arm64" ] || [ "${ARCH}" = "arm" ]; then EXTRA_NEON="--enable-neon"; fi
          echo "Using dav1d in: $DAV1D_PREFIX"
          ls -l "$DAV1D_PREFIX/lib"
          ac_cv_func_glob=no ./configure \
            --prefix="$PWD/../android-build/${{ matrix.abi }}" \
            --target-os=android \
            --arch="${ARCH}" \
            --cpu="${CPU}" \
            --cross-prefix="${CROSS_PREFIX}" \
            --cc="${CC}" \
            --ar="${AR}" \
            --ranlib="${RANLIB}" \
            --strip="${STRIP}" \
            --nm="${NM}" \
            --enable-cross-compile \
            --enable-shared \
            --disable-static \
            --disable-doc \
            --disable-programs \
            --enable-pic \
            --disable-debug \
            --disable-iconv \
            --pkg-config=false \
            --enable-libdav1d \
            $EXTRA_NEON \
            --extra-cflags="--sysroot=${SYSROOT} ${CFLAGS_ABI} -I${DAV1D_PREFIX}/include" \
            --extra-ldflags="--sysroot=${SYSROOT} -L${DAV1D_PREFIX}/lib -ldav1d -Wl,-z,max-page-size=16384 -Wl,--no-undefined"

      - name: Build FFmpeg (${{ matrix.abi }})
        working-directory: ffmpeg-src
        run: |
          set -e
          make -j$(nproc) V=1
          make install V=1

      - name: Check no iconv
        run: |
          set -e
          for so in android-build/${{ matrix.abi }}/lib/*.so; do
            echo "Check $so"
            if readelf -Ws "$so" | grep -E "UND.*iconv_"; then
              echo "iconv symbol found in $so"
              exit 1
            fi
          done
          echo "No iconv symbols."

      - name: Copy config.h
        working-directory: ffmpeg-src
        run: |
          set -e
          cp -v config.h ../android-build/${{ matrix.abi }}/config.h

      - name: Upload artifact (${{ matrix.abi }})
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-android-${{ matrix.abi }}-api${{ env.MIN_API_LEVEL }}
          path: android-build/${{ matrix.abi }}
