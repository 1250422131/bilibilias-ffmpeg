name: Build AV1 FFmpeg for Android (multi-ABI, shared, 16KB page)

on:
  workflow_dispatch:
    inputs:
      ffmpeg-tag:
        description: "FFmpeg git tag (e.g. n8.0)"
        required: true
        default: "n8.0"
      ndk-version:
        description: "Android NDK version (e.g. r27)"
        required: true
        default: "r27"
      min-api-level:
        description: "Min Android API level to build against (e.g. 26 for Android 8)"
        required: true
        default: "26"

jobs:
  build:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        abi: [arm64-v8a, armeabi-v7a, x86_64]
    env:
      MIN_API_LEVEL: ${{ github.event.inputs.min-api-level || '26' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y \
            git wget unzip build-essential pkg-config yasm nasm binutils \
            libc6:i386 libstdc++6:i386 lib32z1 gcc-multilib g++-multilib \
            ninja-build meson python3-pip
          nasm -v
          readelf --version
          pkg-config --version
          
      - name: Download Android NDK
        run: |
          NDK_VER="${{ github.event.inputs.ndk-version || 'r27' }}"
          wget -q https://dl.google.com/android/repository/android-ndk-${NDK_VER}-linux.zip
          unzip -q -o android-ndk-${NDK_VER}-linux.zip
          echo "NDK=$PWD/android-ndk-${NDK_VER}" >> $GITHUB_ENV
          echo "ANDROID_NDK_VERSION=${NDK_VER}" >> $GITHUB_ENV
          
      - name: Clone FFmpeg
        run: |
          git clone https://github.com/FFmpeg/FFmpeg ffmpeg-src
          cd ffmpeg-src
          git fetch --tags
          git checkout ${{ github.event.inputs.ffmpeg-tag || 'n8.0' }}
          git rev-parse --short HEAD
          
      - name: Set up toolchain for ${{ matrix.abi }}
        run: |
          set -e
          NDK="$PWD/android-ndk-${{ github.event.inputs.ndk-version || 'r27' }}"
          TOOLCHAIN="$NDK/toolchains/llvm/prebuilt/linux-x86_64"
          case "${{ matrix.abi }}" in
            arm64-v8a)
              export ARCH=arm64
              export CPU=armv8-a
              export TARGET_HOST=aarch64-linux-android
              export CROSS_PREFIX="$TOOLCHAIN/bin/aarch64-linux-android-"
              export CC="$TOOLCHAIN/bin/aarch64-linux-android${MIN_API_LEVEL}-clang"
              export MESON_CPU_FAMILY=aarch64
              export MESON_CPU=armv8-a
              ;;
            armeabi-v7a)
              export ARCH=arm
              export CPU=armv7-a
              export TARGET_HOST=armv7a-linux-androideabi
              export CROSS_PREFIX="$TOOLCHAIN/bin/arm-linux-androideabi-"
              export CC="$TOOLCHAIN/bin/armv7a-linux-androideabi${MIN_API_LEVEL}-clang"
              export MESON_CPU_FAMILY=arm
              export MESON_CPU=armv7-a
              ;;
            x86_64)
              export ARCH=x86_64
              export CPU=x86-64
              export TARGET_HOST=x86_64-linux-android
              export CROSS_PREFIX="$TOOLCHAIN/bin/x86_64-linux-android-"
              export CC="$TOOLCHAIN/bin/x86_64-linux-android${MIN_API_LEVEL}-clang"
              export MESON_CPU_FAMILY=x86_64
              export MESON_CPU=x86-64
              ;;
          esac
          export AR="$TOOLCHAIN/bin/llvm-ar"
          export RANLIB="$TOOLCHAIN/bin/llvm-ranlib"
          export STRIP="$TOOLCHAIN/bin/llvm-strip"
          export NM="$TOOLCHAIN/bin/llvm-nm"
          export SYSROOT="$TOOLCHAIN/sysroot"
          
          echo "ARCH=$ARCH" >> $GITHUB_ENV
          echo "CPU=$CPU" >> $GITHUB_ENV
          echo "TARGET_HOST=$TARGET_HOST" >> $GITHUB_ENV
          echo "CROSS_PREFIX=$CROSS_PREFIX" >> $GITHUB_ENV
          echo "CC=$CC" >> $GITHUB_ENV
          echo "AR=$AR" >> $GITHUB_ENV
          echo "RANLIB=$RANLIB" >> $GITHUB_ENV
          echo "STRIP=$STRIP" >> $GITHUB_ENV
          echo "NM=$NM" >> $GITHUB_ENV
          echo "SYSROOT=$SYSROOT" >> $GITHUB_ENV
          echo "MESON_CPU_FAMILY=$MESON_CPU_FAMILY" >> $GITHUB_ENV
          echo "MESON_CPU=$MESON_CPU" >> $GITHUB_ENV
          
      - name: Create meson cross-file for ${{ matrix.abi }}
        run: |
          set -e
          mkdir -p meson-cross
          cat > meson-cross/android-${{ matrix.abi }}.ini <<EOF
          [binaries]
          c = '${{ env.CC }}'
          cpp = '${CC/clang/clang++}'
          ar = '${{ env.AR }}'
          strip = '${{ env.STRIP }}'
          pkgconfig = '/usr/bin/false'

          [host_machine]
          system = 'android'
          cpu_family = '${{ env.MESON_CPU_FAMILY }}'
          cpu = '${{ env.MESON_CPU }}'
          endian = 'little'

          [properties]
          sys_root = '${{ env.SYSROOT }}'

          [built-in options]
          c_args = ['-fPIC']
          cpp_args = ['-fPIC']
          c_link_args = ['-Wl,-z,max-page-size=16384']
          cpp_link_args = ['-Wl,-z,max-page-size=16384']
          EOF
          cat meson-cross/android-${{ matrix.abi }}.ini
          
      - name: Build dav1d (AV1 decoder) for ${{ matrix.abi }}
        run: |
          set -e
          DAV1D_VER=1.2.1
          PREFIX_ABS="$PWD/android-libs/${{ matrix.abi }}"
          
          mkdir -p deps && cd deps
          if [ ! -d dav1d ]; then
            git clone --branch $DAV1D_VER --depth 1 https://code.videolan.org/videolan/dav1d.git
          fi
          cd dav1d
          rm -rf build
          meson setup build \
            --cross-file ../../meson-cross/android-${{ matrix.abi }}.ini \
            --prefix="$PREFIX_ABS" \
            --libdir=lib \
            --buildtype=release \
            --default-library=shared
          ninja -C build
          ninja -C build install
          
          # Fix pkg-config file to use relative paths
          PC_FILE="$PREFIX_ABS/lib/pkgconfig/dav1d.pc"
          echo "=== Original dav1d.pc ==="
          cat "$PC_FILE"
          
          # Create a corrected .pc file
          cat > "$PC_FILE" <<EOF
          prefix=$PREFIX_ABS
          exec_prefix=\${prefix}
          libdir=\${prefix}/lib
          includedir=\${prefix}/include

          Name: dav1d
          Description: AV1 decoding library
          Version: 1.2.1
          Cflags: -I\${includedir}
          Libs: -L\${libdir} -ldav1d
          EOF
          
          echo "=== Fixed dav1d.pc ==="
          cat "$PC_FILE"
          
      - name: Clean before configure
        working-directory: ffmpeg-src
        run: |
          make distclean || true
          git clean -xdf || true
          
      - name: Configure FFmpeg for ${{ matrix.abi }} (shared, AV1 decode only)
        working-directory: ffmpeg-src
        run: |
          set -e
          mkdir -p ../android-build/${{ matrix.abi }}
          
          PREFIX_ABS="$PWD/../android-libs/${{ matrix.abi }}"
          
          # Setup pkg-config to find dav1d
          export PKG_CONFIG_LIBDIR="$PREFIX_ABS/lib/pkgconfig"
          export PKG_CONFIG_PATH="$PREFIX_ABS/lib/pkgconfig"
          # Don't set PKG_CONFIG_SYSROOT_DIR as it causes path duplication
          
          # Test if pkg-config can find dav1d
          echo "=== Testing pkg-config ==="
          echo "PKG_CONFIG_LIBDIR=$PKG_CONFIG_LIBDIR"
          pkg-config --list-all | grep dav1d || echo "dav1d not in pkg-config list"
          pkg-config --modversion dav1d || echo "Cannot get dav1d version"
          pkg-config --cflags dav1d || echo "Cannot get dav1d cflags"
          pkg-config --libs dav1d || echo "Cannot get dav1d libs"
          
          ac_cv_func_glob=no ./configure \
            --prefix="$PWD/../android-build/${{ matrix.abi }}" \
            --target-os=android \
            --arch="${{ env.ARCH }}" \
            --cpu="${{ env.CPU }}" \
            --cross-prefix="${{ env.CROSS_PREFIX }}" \
            --cc="${{ env.CC }}" \
            --ar="${{ env.AR }}" \
            --ranlib="${{ env.RANLIB }}" \
            --strip="${{ env.STRIP }}" \
            --nm="${{ env.NM }}" \
            --enable-cross-compile \
            --enable-shared \
            --disable-static \
            --disable-doc \
            --disable-programs \
            --enable-pic \
            --disable-debug \
            --disable-iconv \
            --enable-libdav1d \
            --enable-decoder=libdav1d \
            $( [ "${{ env.ARCH }}" = "arm64" -o "${{ env.ARCH }}" = "arm" ] && echo "--enable-neon" ) \
            --extra-cflags="--sysroot=${{ env.SYSROOT }} -I$PREFIX_ABS/include" \
            --extra-ldflags="--sysroot=${{ env.SYSROOT }} -L$PREFIX_ABS/lib -Wl,-z,max-page-size=16384 -Wl,--no-undefined -Wl,-rpath-link,$PREFIX_ABS/lib"
            
      - name: Show config.log on failure
        if: failure()
        working-directory: ffmpeg-src
        run: |
          echo "=== Last 150 lines of config.log ==="
          tail -150 ffbuild/config.log || true
          
      - name: Build FFmpeg for ${{ matrix.abi }}
        working-directory: ffmpeg-src
        run: |
          set -e
          make -j"$(nproc)"
          make install V=1
          
      - name: Copy dav1d library to output
        run: |
          set -e
          cp -v android-libs/${{ matrix.abi }}/lib/libdav1d.so* android-build/${{ matrix.abi }}/lib/ || true
          
      - name: Verify AV1 decoder is enabled
        working-directory: ffmpeg-src
        run: |
          set -e
          echo "=== Checking if libdav1d decoder is enabled ==="
          grep "CONFIG_LIBDAV1D_DECODER" config.h || echo "WARNING: libdav1d decoder not found"
          grep "CONFIG_LIBDAV1D" config.h || echo "WARNING: libdav1d not found"
          
      - name: Verify no iconv references remain
        run: |
          set -e
          so_dir="android-build/${{ matrix.abi }}/lib"
          test -d "$so_dir"
          for so in "$so_dir"/libav*.so; do
            echo "Checking undefined iconv symbols in: $so"
            if readelf -Ws "$so" | grep -E "UND.*iconv_"; then
              echo "Error: $so still references iconv_* symbols"
              exit 1
            fi
          done
          echo "OK: No iconv references found."
          
      - name: List built libraries
        run: |
          echo "=== Built FFmpeg libraries ==="
          ls -lh android-build/${{ matrix.abi }}/lib/
          echo ""
          echo "=== Library dependencies ==="
          for so in android-build/${{ matrix.abi }}/lib/libav*.so; do
            echo "--- $so ---"
            readelf -d "$so" | grep NEEDED || true
          done
          
      - name: Copy config.h to output dir
        working-directory: ffmpeg-src
        run: |
          cp -v config.h ../android-build/${{ matrix.abi }}/config.h
          
      - name: Upload ${{ matrix.abi }} build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-android-${{ matrix.abi }}-api${{ env.MIN_API_LEVEL }}
          path: android-build/${{ matrix.abi }}
