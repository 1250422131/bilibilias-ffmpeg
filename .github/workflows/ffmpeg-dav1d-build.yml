name: Build FFmpeg Android (dav1d AV1 decode)

on:
  workflow_dispatch:
    inputs:
      ffmpeg-tag:
        description: "FFmpeg git tag (e.g. n8.0)"
        required: true
        default: "n8.0"
      ndk-version:
        description: "Android NDK version (e.g. r27)"
        required: true
        default: "r27"
      min-api-level:
        description: "Min Android API level"
        required: true
        default: "26"

jobs:
  build:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        abi: [arm64-v8a, armeabi-v7a, x86_64]

    env:
      MIN_API_LEVEL: ${{ github.event.inputs.min-api-level || '26' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install deps (Meson 最新版)
        run: |
          set -e
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y git wget unzip build-essential python3 python3-pip pkg-config \
            yasm nasm binutils ninja-build libc6:i386 libstdc++6:i386 lib32z1 gcc-multilib g++-multilib
          pip install --upgrade meson==1.4.0
          echo "Tool versions:"
          nasm -v
          meson --version
          ninja --version

      - name: Download NDK
        run: |
          set -e
          NDK_VER="${{ github.event.inputs.ndk-version || 'r27' }}"
          wget -q https://dl.google.com/android/repository/android-ndk-${NDK_VER}-linux.zip
          unzip -q -o android-ndk-${NDK_VER}-linux.zip
          echo "NDK=$PWD/android-ndk-${NDK_VER}" >> $GITHUB_ENV

      - name: Clone FFmpeg
        run: |
          set -e
          git clone https://github.com/FFmpeg/FFmpeg ffmpeg-src
          cd ffmpeg-src
          git fetch --tags
          git checkout ${{ github.event.inputs.ffmpeg-tag || 'n8.0' }}

      - name: Setup toolchain (${{ matrix.abi }})
        run: |
          set -e
          NDK="$PWD/android-ndk-${{ github.event.inputs.ndk-version || 'r27' }}"
          TOOLCHAIN="$NDK/toolchains/llvm/prebuilt/linux-x86_64"

          case "${{ matrix.abi }}" in
            arm64-v8a)
              ARCH=arm64
              CPU_FAMILY=aarch64
              CPU_CANON=armv8
              CROSS_PREFIX="$TOOLCHAIN/bin/aarch64-linux-android-"
              CC="$TOOLCHAIN/bin/aarch64-linux-android${MIN_API_LEVEL}-clang"
              CFLAGS_LIST=("-march=armv8-a" "-fPIC")
              ;;
            armeabi-v7a)
              ARCH=arm
              CPU_FAMILY=arm
              CPU_CANON=armv7
              CROSS_PREFIX="$TOOLCHAIN/bin/arm-linux-androideabi-"
              CC="$TOOLCHAIN/bin/armv7a-linux-androideabi${MIN_API_LEVEL}-clang"
              # 使用 thumb + neon（可选，不想用 thumb 可去掉 -mthumb）
              CFLAGS_LIST=("-march=armv7-a" "-mfpu=neon" "-mfloat-abi=softfp" "-mthumb" "-fPIC")
              ;;
            x86_64)
              ARCH=x86_64
              CPU_FAMILY=x86_64
              CPU_CANON=x86_64
              CROSS_PREFIX="$TOOLCHAIN/bin/x86_64-linux-android-"
              CC="$TOOLCHAIN/bin/x86_64-linux-android${MIN_API_LEVEL}-clang"
              CFLAGS_LIST=("-march=x86-64" "-fPIC")
              ;;
          esac

          AR="$TOOLCHAIN/bin/llvm-ar"
          RANLIB="$TOOLCHAIN/bin/llvm-ranlib"
          STRIP="$TOOLCHAIN/bin/llvm-strip"
          NM="$TOOLCHAIN/bin/llvm-nm"
          SYSROOT="$TOOLCHAIN/sysroot"

          # 展开成空格串供 FFmpeg 使用；Meson 用数组生成
          CFLAGS_ABI="${CFLAGS_LIST[*]}"

          {
            echo "ARCH=$ARCH"
            echo "CPU_FAMILY=$CPU_FAMILY"
            echo "CPU_CANON=$CPU_CANON"
            echo "CROSS_PREFIX=$CROSS_PREFIX"
            echo "CC=$CC"
            echo "AR=$AR"
            echo "RANLIB=$RANLIB"
            echo "STRIP=$STRIP"
            echo "NM=$NM"
            echo "SYSROOT=$SYSROOT"
            echo "CFLAGS_ABI=$CFLAGS_ABI"
          } >> $GITHUB_ENV

      - name: Build dav1d (${{ matrix.abi }})
        env:
          ARCH: ${{ env.ARCH }}
          CPU_FAMILY: ${{ env.CPU_FAMILY }}
          CPU_CANON: ${{ env.CPU_CANON }}
          CC: ${{ env.CC }}
          AR: ${{ env.AR }}
          RANLIB: ${{ env.RANLIB }}
          STRIP: ${{ env.STRIP }}
          SYSROOT: ${{ env.SYSROOT }}
          CFLAGS_ABI: ${{ env.CFLAGS_ABI }}
        run: |
          set -e
          DAV1D_VERSION=1.4.3
          if [ ! -d dav1d ]; then
            git clone https://code.videolan.org/videolan/dav1d.git
          fi
          cd dav1d
          git fetch --tags
          git checkout "tags/$DAV1D_VERSION"

          INSTALL_PREFIX="$GITHUB_WORKSPACE/dav1d/install-${{ matrix.abi }}"
          CROSS_FILE="cross-${{ matrix.abi }}.meson"

          # 将 CFLAGS_ABI 拆成单个元素，生成 c_args 列表
          IFS=' ' read -r -a CFLAGS_ARRAY <<< "$CFLAGS_ABI"
          C_ARGS_STR=""
          for f in "${CFLAGS_ARRAY[@]}"; do
            [ -n "$f" ] && C_ARGS_STR="${C_ARGS_STR}'$f', "
          done

          cat > "$CROSS_FILE" <<EOF
          [host_machine]
          system = 'android'
          cpu_family = '${CPU_FAMILY}'
          cpu = '${CPU_CANON}'
          endian = 'little'

          [binaries]
          c = '${CC}'
          ar = '${AR}'
          ranlib = '${RANLIB}'
          strip = '${STRIP}'
          pkgconfig = 'pkg-config'

          [properties]
          needs_exe_wrapper = true
          sys_root = '${SYSROOT}'

          [built-in options]
          c_args = ['--sysroot=${SYSROOT}', ${C_ARGS_STR}]
          c_link_args = ['--sysroot=${SYSROOT}']
          EOF

          echo "===== Generated cross file ====="
          sed 's/^/| /' "$CROSS_FILE"

          echo "=== Quick test compile with raw clang (如果失败请贴日志) ==="
          echo 'int main(){}' > t.c
          set -x
          "${CC}" --sysroot="${SYSROOT}" ${CFLAGS_ABI} -c t.c -o t.o
          set +x

          meson setup build-${{ matrix.abi }} \
            --cross-file "$CROSS_FILE" \
            --prefix "$INSTALL_PREFIX" \
            --libdir lib \
            --buildtype release \
            -Ddefault_library=static \
            -Denable_tests=false \
            -Denable_tools=false \
            -Denable_asm=true

          ninja -C build-${{ matrix.abi }} -v
          ninja -C build-${{ matrix.abi }} install
          test -f "$INSTALL_PREFIX/lib/libdav1d.a"
          ls -l "$INSTALL_PREFIX/lib"

      - name: Clean FFmpeg tree
        working-directory: ffmpeg-src
        run: |
          set -e
          make distclean || true
          git clean -xdf || true

      - name: Configure FFmpeg (${{ matrix.abi }})
        working-directory: ffmpeg-src
        run: |
          set -e
          DAV1D_PREFIX="$GITHUB_WORKSPACE/dav1d/install-${{ matrix.abi }}"
          echo "Using dav1d from $DAV1D_PREFIX"
          ls -l "$DAV1D_PREFIX/lib"

          EXTRA_NEON=""
          if [ "$ARCH" = "arm64" ] || [ "$ARCH" = "arm" ]; then EXTRA_NEON="--enable-neon"; fi

          ac_cv_func_glob=no ./configure \
            --prefix="$PWD/../android-build/${{ matrix.abi }}" \
            --target-os=android \
            --arch="$ARCH" \
            --cpu="$CPU_CANON" \
            --cross-prefix="$CROSS_PREFIX" \
            --cc="$CC" \
            --ar="$AR" \
            --ranlib="$RANLIB" \
            --strip="$STRIP" \
            --nm="$NM" \
            --enable-cross-compile \
            --enable-shared \
            --disable-static \
            --disable-doc \
            --disable-programs \
            --enable-pic \
            --disable-debug \
            --disable-iconv \
            --pkg-config=false \
            --enable-libdav1d \
            $EXTRA_NEON \
            --extra-cflags="--sysroot=$SYSROOT $CFLAGS_ABI -I$DAV1D_PREFIX/include" \
            --extra-ldflags="--sysroot=$SYSROOT -L$DAV1D_PREFIX/lib -ldav1d -Wl,-z,max-page-size=16384 -Wl,--no-undefined"

      - name: Build FFmpeg (${{ matrix.abi }})
        working-directory: ffmpeg-src
        run: |
          set -e
          make -j$(nproc) V=1
          make install V=1

      - name: Check no iconv
        run: |
          set -e
          for so in android-build/${{ matrix.abi }}/lib/*.so; do
            echo "Check $so"
            if readelf -Ws "$so" | grep -E "UND.*iconv_"; then
              echo "iconv symbol found in $so"
              exit 1
            fi
          done
          echo "No iconv symbols."

      - name: Copy config.h
        working-directory: ffmpeg-src
        run: |
          set -e
          cp -v config.h ../android-build/${{ matrix.abi }}/config.h

      - name: Upload artifact (${{ matrix.abi }})
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-android-${{ matrix.abi }}-api${{ env.MIN_API_LEVEL }}
          path: android-build/${{ matrix.abi }}

      - name: (If dav1d failed) Dump meson log
        if: failure()
        run: |
          set -e
          LOGDIR="dav1d/build-${{ matrix.abi }}/meson-logs"
          if [ -d "$LOGDIR" ]; then
            echo "===== meson-log.txt (tail) ====="
            tail -n 120 "$LOGDIR/meson-log.txt" || true
          else
            echo "No meson log dir found."
          fi
