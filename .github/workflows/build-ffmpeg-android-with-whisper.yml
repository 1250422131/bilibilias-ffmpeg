name: Build FFmpeg + Whisper for Android (multi-ABI, API 34, shared)

on:
  workflow_dispatch:
    inputs:
      ffmpeg-tag:
        description: "FFmpeg git tag (e.g. n8.0)"
        required: true
        default: "n8.0"
      ndk-version:
        description: "Android NDK version (e.g. r27)"
        required: true
        default: "r27"
      whisper-tag:
        description: "whisper.cpp tag (>= v1.7.5)"
        required: true
        default: "v1.7.5"

jobs:
  build:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        abi: [arm64-v8a, armeabi-v7a, x86_64]
    env:
      API_LEVEL: 34
      FFMPEG_TAG: ${{ inputs.ffmpeg-tag || 'n8.0' }}
      ANDROID_NDK_VERSION: ${{ inputs.ndk-version || 'r27' }}
      WHISPER_TAG: ${{ inputs.whisper-tag || 'v1.7.5' }}
    steps:
      - name: Checkout workflow files
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y \
            git wget unzip build-essential pkg-config yasm nasm cmake ninja-build \
            libc6:i386 libstdc++6:i386 lib32z1 gcc-multilib g++-multilib
          nasm -v

      - name: Download Android NDK
        run: |
          wget -q https://dl.google.com/android/repository/android-ndk-${ANDROID_NDK_VERSION}-linux.zip
          unzip -q -o android-ndk-${ANDROID_NDK_VERSION}-linux.zip
          echo "NDK=$PWD/android-ndk-${ANDROID_NDK_VERSION}" >> $GITHUB_ENV

      - name: Clone FFmpeg
        run: |
          git clone https://github.com/FFmpeg/FFmpeg ffmpeg-src
          cd ffmpeg-src
          git fetch --tags
          git checkout "${FFMPEG_TAG}"

      - name: Clone whisper.cpp
        run: |
          git clone --depth=1 -b "${WHISPER_TAG}" https://github.com/ggerganov/whisper.cpp whisper-src

      - name: Set up toolchain and env for ${{ matrix.abi }}
        run: |
          NDK="$PWD/android-ndk-${ANDROID_NDK_VERSION}"
          TOOLCHAIN="$NDK/toolchains/llvm/prebuilt/linux-x86_64"
          case "${{ matrix.abi }}" in
            arm64-v8a)
              ARCH=arm64
              CPU=armv8-a
              ANDROID_ABI=arm64-v8a
              CROSS_PREFIX="$TOOLCHAIN/bin/aarch64-linux-android-"
              CC="$TOOLCHAIN/bin/aarch64-linux-android${API_LEVEL}-clang"
              CXX="$TOOLCHAIN/bin/aarch64-linux-android${API_LEVEL}-clang++"
              ;;
            armeabi-v7a)
              ARCH=arm
              CPU=armv7-a
              ANDROID_ABI=armeabi-v7a
              CROSS_PREFIX="$TOOLCHAIN/bin/arm-linux-androideabi-"
              CC="$TOOLCHAIN/bin/armv7a-linux-androideabi${API_LEVEL}-clang"
              CXX="$TOOLCHAIN/bin/armv7a-linux-androideabi${API_LEVEL}-clang++"
              ;;
            x86_64)
              ARCH=x86_64
              CPU=x86-64
              ANDROID_ABI=x86_64
              CROSS_PREFIX="$TOOLCHAIN/bin/x86_64-linux-android-"
              CC="$TOOLCHAIN/bin/x86_64-linux-android${API_LEVEL}-clang"
              CXX="$TOOLCHAIN/bin/x86_64-linux-android${API_LEVEL}-clang++"
              ;;
          esac

          echo "ARCH=$ARCH" >> $GITHUB_ENV
          echo "CPU=$CPU" >> $GITHUB_ENV
          echo "ANDROID_ABI=$ANDROID_ABI" >> $GITHUB_ENV
          echo "CROSS_PREFIX=$CROSS_PREFIX" >> $GITHUB_ENV
          echo "CC=$CC" >> $GITHUB_ENV
          echo "CXX=$CXX" >> $GITHUB_ENV
          echo "AR=$TOOLCHAIN/bin/llvm-ar" >> $GITHUB_ENV
          echo "RANLIB=$TOOLCHAIN/bin/llvm-ranlib" >> $GITHUB_ENV
          echo "STRIP=$TOOLCHAIN/bin/llvm-strip" >> $GITHUB_ENV
          echo "NM=$TOOLCHAIN/bin/llvm-nm" >> $GITHUB_ENV
          echo "ANDROID_PLATFORM=android-${API_LEVEL}" >> $GITHUB_ENV

      - name: Build and stage whisper.cpp for ${{ matrix.abi }}
        env:
          NDK: ${{ env.NDK }}
          ANDROID_ABI: ${{ env.ANDROID_ABI }}
          ANDROID_PLATFORM: ${{ env.ANDROID_PLATFORM }}
          WHISPER_TAG: ${{ env.WHISPER_TAG }}
        run: |
          set -euo pipefail
          DEPS_PREFIX="$PWD/android-deps/${{ matrix.abi }}"
          mkdir -p "$DEPS_PREFIX"/{lib,include,lib/pkgconfig}

          cmake -S whisper-src -B "whisper-build-${{ matrix.abi }}" -G Ninja \
            -DANDROID_NDK="$NDK" \
            -DCMAKE_TOOLCHAIN_FILE="$NDK/build/cmake/android.toolchain.cmake" \
            -DANDROID_ABI="$ANDROID_ABI" \
            -DANDROID_PLATFORM="$ANDROID_PLATFORM" \
            -DBUILD_SHARED_LIBS=ON \
            -DWHISPER_BUILD_TESTS=OFF \
            -DWHISPER_BUILD_EXAMPLES=OFF \
            -DCMAKE_BUILD_TYPE=Release

          cmake --build "whisper-build-${{ matrix.abi }}" -j"$(nproc)"

          # 复制 libwhisper（优先共享库）
          if [ -f "whisper-build-${{ matrix.abi }}/src/libwhisper.so" ]; then
            cp "whisper-build-${{ matrix.abi }}/src/libwhisper.so" "$DEPS_PREFIX/lib/"
            WHISPER_LIBTYPE=so
          elif [ -f "whisper-build-${{ matrix.abi }}/src/libwhisper.a" ]; then
            cp "whisper-build-${{ matrix.abi }}/src/libwhisper.a" "$DEPS_PREFIX/lib/"
            WHISPER_LIBTYPE=a
          elif [ -f "whisper-build-${{ matrix.abi }}/libwhisper.so" ]; then
            cp "whisper-build-${{ matrix.abi }}/libwhisper.so" "$DEPS_PREFIX/lib/"
            WHISPER_LIBTYPE=so
          elif [ -f "whisper-build-${{ matrix.abi }}/libwhisper.a" ]; then
            cp "whisper-build-${{ matrix.abi }}/libwhisper.a" "$DEPS_PREFIX/lib/"
            WHISPER_LIBTYPE=a
          else
            echo "libwhisper.(so|a) not found"; ls -R "whisper-build-${{ matrix.abi }}"; exit 1
          fi

          # 复制 ggml 运行时依赖（共享库优先）
          if compgen -G "whisper-build-${{ matrix.abi }}/ggml/src/libggml*.so" > /dev/null; then
            cp whisper-build-${{ matrix.abi }}/ggml/src/libggml*.so "$DEPS_PREFIX/lib/" || true
          elif compgen -G "whisper-build-${{ matrix.abi }}/ggml/src/libggml*.a" > /dev/null; then
            cp whisper-build-${{ matrix.abi }}/ggml/src/libggml*.a "$DEPS_PREFIX/lib/" || true
          fi

          # 头文件
          if [ -f "whisper-src/whisper.h" ]; then
            cp "whisper-src/whisper.h" "$DEPS_PREFIX/include/"
          else
            find whisper-src -maxdepth 2 -name whisper.h -print -exec cp {} "$DEPS_PREFIX/include/" \;
          fi

          # 生成 pkg-config（Version 去掉开头的 v/V；加入 -lc++_shared 以满足 C++ 运行库）
          WHISPER_VER="$(printf '%s' "${WHISPER_TAG}" | sed 's/^[vV]//')"

          sed 's/^[[:space:]]*//' <<'EOF' > "$DEPS_PREFIX/lib/pkgconfig/whisper.pc"
            prefix=@PREFIX@
            exec_prefix=${prefix}
            libdir=${prefix}/lib
            includedir=${prefix}/include

            Name: whisper
            Description: Whisper inference library
            Version: @VERSION@
            Libs: -L${libdir} -lwhisper -lggml -lggml-cpu -lggml-base -lc++_shared -Wl,-rpath-link,${libdir}
            Libs.private: -llog -lm -latomic
            Cflags: -I${includedir}
          EOF

          sed -i "s|@PREFIX@|$DEPS_PREFIX|g" "$DEPS_PREFIX/lib/pkgconfig/whisper.pc"
          sed -i "s|@VERSION@|$WHISPER_VER|g" "$DEPS_PREFIX/lib/pkgconfig/whisper.pc"

          echo "PKG_CONFIG_PATH=$DEPS_PREFIX/lib/pkgconfig" >> $GITHUB_ENV
          echo "PKG_CONFIG_LIBDIR=$DEPS_PREFIX/lib/pkgconfig" >> $GITHUB_ENV

      - name: Verify whisper pkg-config for ${{ matrix.abi }}
        env:
          PKG_CONFIG_PATH: ${{ env.PKG_CONFIG_PATH }}
          PKG_CONFIG_LIBDIR: ${{ env.PKG_CONFIG_LIBDIR }}
        run: |
          set -e
          echo "PKG_CONFIG=$(command -v pkg-config)"
          echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH"
          echo "PKG_CONFIG_LIBDIR=$PKG_CONFIG_LIBDIR"
          ls -la "$PKG_CONFIG_PATH"
          echo "---- whisper.pc ----"
          cat "$PKG_CONFIG_PATH/whisper.pc" || true
          echo "---- pkg-config checks ----"
          pkg-config --version
          pkg-config --modversion whisper || true
          if pkg-config --exists 'whisper >= 1.7.5'; then
            echo "pkg-config exists check OK"
          else
            echo "pkg-config exists check FAILED"; exit 2
          fi
          echo "CFLAGS: $(pkg-config --cflags whisper)"
          echo "LIBS:   $(pkg-config --libs whisper)"

      - name: Clean before configure
        working-directory: ffmpeg-src
        run: |
          make distclean || true
          git clean -xdf || true

      - name: Configure FFmpeg for ${{ matrix.abi }} with whisper
        working-directory: ffmpeg-src
        env:
          ARCH: ${{ env.ARCH }}
          CPU: ${{ env.CPU }}
          CROSS_PREFIX: ${{ env.CROSS_PREFIX }}
          CC: ${{ env.CC }}
          AR: ${{ env.AR }}
          RANLIB: ${{ env.RANLIB }}
          STRIP: ${{ env.STRIP }}
          NM: ${{ env.NM }}
          PKG_CONFIG_PATH: ${{ env.PKG_CONFIG_PATH }}
          PKG_CONFIG_LIBDIR: ${{ env.PKG_CONFIG_LIBDIR }}
        run: |
          set -euo pipefail
          mkdir -p ../android-build/${{ matrix.abi }}

          NEON_FLAG=""
          if [ "$ARCH" = "arm64" ] || [ "$ARCH" = "arm" ]; then
            NEON_FLAG="--enable-neon"
          fi

          ./configure \
            --prefix="$PWD/../android-build/${{ matrix.abi }}" \
            --target-os=android \
            --arch="$ARCH" \
            --cpu="$CPU" \
            --cross-prefix="$CROSS_PREFIX" \
            --cc="$CC" \
            --ar="$AR" \
            --ranlib="$RANLIB" \
            --strip="$STRIP" \
            --nm="$NM" \
            --pkg-config="$(command -v pkg-config)" \
            --enable-cross-compile \
            --enable-shared \
            --disable-static \
            --disable-doc \
            --disable-programs \
            --enable-pic \
            --disable-debug \
            $NEON_FLAG \
            --enable-whisper \
            --extra-ldflags="-Wl,-z,max-page-size=16384"

      - name: Build FFmpeg for ${{ matrix.abi }}
        working-directory: ffmpeg-src
        run: |
          make -j"$(nproc)"
          make install

      - name: Copy config.h to output dir
        working-directory: ffmpeg-src
        run: cp config.h "../android-build/${{ matrix.abi }}/config.h"

      - name: Upload ${{ matrix.abi }} build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-android-${{ matrix.abi }}
          path: android-build/${{ matrix.abi }}
