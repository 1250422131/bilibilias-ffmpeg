name: Build FFmpeg + Whisper + GGML for Android (multi-ABI, shared, ffmpeg_main export, robust fftools coverage)

on:
  workflow_dispatch:
    inputs:
      ffmpeg-tag:
        description: "FFmpeg git tag (e.g. n8.0)"
        required: true
        default: "n8.0"
      ndk-version:
        description: "Android NDK version (e.g. r27)"
        required: true
        default: "r27"
      whisper-tag:
        description: "whisper.cpp tag (>= v1.7.5)"
        required: true
        default: "v1.7.5"

jobs:
  build:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        abi: [arm64-v8a, armeabi-v7a, x86_64]
    env:
      API_LEVEL: 34
      FFMPEG_TAG: ${{ inputs.ffmpeg-tag || 'n8.0' }}
      ANDROID_NDK_VERSION: ${{ inputs.ndk-version || 'r27' }}
      WHISPER_TAG: ${{ inputs.whisper-tag || 'v1.7.5' }}
    steps:
      - name: Checkout workflow files
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y \
            git wget unzip build-essential pkg-config yasm nasm cmake ninja-build \
            libc6:i386 libstdc++6:i386 lib32z1 gcc-multilib g++-multilib
          nasm -v

      - name: Download Android NDK
        run: |
          wget -q "https://dl.google.com/android/repository/android-ndk-${ANDROID_NDK_VERSION}-linux.zip"
          unzip -q -o android-ndk-${ANDROID_NDK_VERSION}-linux.zip
          echo "NDK=$PWD/android-ndk-${ANDROID_NDK_VERSION}" >> $GITHUB_ENV

      - name: Clone FFmpeg
        run: |
          git clone https://github.com/FFmpeg/FFmpeg.git ffmpeg-src
          cd ffmpeg-src
          git fetch --tags
          git checkout "${FFMPEG_TAG}"

      - name: Clone whisper.cpp
        run: |
          git clone --depth=1 -b "${WHISPER_TAG}" https://github.com/ggerganov/whisper.cpp.git whisper-src

      - name: Set up toolchain and env for ${{ matrix.abi }}
        run: |
          NDK="$PWD/android-ndk-${ANDROID_NDK_VERSION}"
          TOOLCHAIN="$NDK/toolchains/llvm/prebuilt/linux-x86_64"
          case "${{ matrix.abi }}" in
            arm64-v8a)
              ARCH=arm64
              CPU=armv8-a
              ANDROID_ABI=arm64-v8a
              CROSS_PREFIX="$TOOLCHAIN/bin/aarch64-linux-android-"
              CC="$TOOLCHAIN/bin/aarch64-linux-android${API_LEVEL}-clang"
              CXX="$TOOLCHAIN/bin/aarch64-linux-android${API_LEVEL}-clang++"
              ;;
            armeabi-v7a)
              ARCH=arm
              CPU=armv7-a
              ANDROID_ABI=armeabi-v7a
              CROSS_PREFIX="$TOOLCHAIN/bin/arm-linux-androideabi-"
              CC="$TOOLCHAIN/bin/armv7a-linux-androideabi${API_LEVEL}-clang"
              CXX="$TOOLCHAIN/bin/armv7a-linux-androideabi${API_LEVEL}-clang++"
              ;;
            x86_64)
              ARCH=x86_64
              CPU=x86-64
              ANDROID_ABI=x86_64
              CROSS_PREFIX="$TOOLCHAIN/bin/x86_64-linux-android-"
              CC="$TOOLCHAIN/bin/x86_64-linux-android${API_LEVEL}-clang"
              CXX="$TOOLCHAIN/bin/x86_64-linux-android${API_LEVEL}-clang++"
              ;;
          esac
          echo "ARCH=$ARCH" >> $GITHUB_ENV
          echo "CPU=$CPU" >> $GITHUB_ENV
          echo "ANDROID_ABI=$ANDROID_ABI" >> $GITHUB_ENV
          echo "CROSS_PREFIX=$CROSS_PREFIX" >> $GITHUB_ENV
          echo "CC=$CC" >> $GITHUB_ENV
          echo "CXX=$CXX" >> $GITHUB_ENV
          echo "AR=$TOOLCHAIN/bin/llvm-ar" >> $GITHUB_ENV
          echo "RANLIB=$TOOLCHAIN/bin/llvm-ranlib" >> $GITHUB_ENV
          echo "STRIP=$TOOLCHAIN/bin/llvm-strip" >> $GITHUB_ENV
          echo "NM=$TOOLCHAIN/bin/llvm-nm" >> $GITHUB_ENV
          echo "ANDROID_PLATFORM=android-${API_LEVEL}" >> $GITHUB_ENV

      - name: Build whisper.cpp for ${{ matrix.abi }}
        run: |
          set -euo pipefail
          DEPS_PREFIX="$PWD/android-deps/${{ matrix.abi }}"
          mkdir -p "$DEPS_PREFIX"/{lib,include,lib/pkgconfig}
          cmake -S whisper-src -B "whisper-build-${{ matrix.abi }}" -G Ninja \
            -DANDROID_NDK="$NDK" \
            -DCMAKE_TOOLCHAIN_FILE="$NDK/build/cmake/android.toolchain.cmake" \
            -DANDROID_ABI="$ANDROID_ABI" \
            -DANDROID_PLATFORM="$ANDROID_PLATFORM" \
            -DBUILD_SHARED_LIBS=ON \
            -DWHISPER_BUILD_TESTS=OFF \
            -DWHISPER_BUILD_EXAMPLES=OFF \
            -DCMAKE_BUILD_TYPE=Release
          cmake --build "whisper-build-${{ matrix.abi }}" -j"$(nproc)"
          if [ -f "whisper-build-${{ matrix.abi }}/src/libwhisper.so" ]; then
            cp "whisper-build-${{ matrix.abi }}/src/libwhisper.so" "$DEPS_PREFIX/lib/"
          elif [ -f "whisper-build-${{ matrix.abi }}/libwhisper.so" ]; then
            cp "whisper-build-${{ matrix.abi }}/libwhisper.so" "$DEPS_PREFIX/lib/"
          else
            echo "libwhisper.so not found"
            find "whisper-build-${{ matrix.abi }}" -name "*.so" -type f
            exit 1
          fi
          find "whisper-build-${{ matrix.abi }}" -name "libggml*.so" -exec cp {} "$DEPS_PREFIX/lib/" \; || true
          if [ -f "whisper-src/include/whisper.h" ]; then
            cp "whisper-src/include/whisper.h" "$DEPS_PREFIX/include/"
          elif [ -f "whisper-src/whisper.h" ]; then
            cp "whisper-src/whisper.h" "$DEPS_PREFIX/include/"
          else
            find whisper-src -name "whisper.h" -type f -exec cp {} "$DEPS_PREFIX/include/" \;
          fi
          if [ -f "whisper-src/ggml/include/ggml.h" ]; then
            cp "whisper-src/ggml/include/ggml.h" "$DEPS_PREFIX/include/"
          elif [ -f "whisper-src/ggml.h" ]; then
            cp "whisper-src/ggml.h" "$DEPS_PREFIX/include/"
          else
            find whisper-src -name "ggml.h" -type f -exec cp {} "$DEPS_PREFIX/include/" \;
          fi
          find whisper-src -name "ggml*.h" -type f -exec cp {} "$DEPS_PREFIX/include/" \; || true
          echo "DEPS_PREFIX=$DEPS_PREFIX" >> $GITHUB_ENV

      - name: Create whisper.pc
        run: |
          WHISPER_VER="${WHISPER_TAG#v}"
          PC_FILE="$DEPS_PREFIX/lib/pkgconfig/whisper.pc"
          {
            echo "prefix=$DEPS_PREFIX"
            echo "exec_prefix=\${prefix}"
            echo "libdir=\${prefix}/lib"
            echo "includedir=\${prefix}/include"
            echo ""
            echo "Name: whisper"
            echo "Description: Whisper inference library"
            echo "Version: $WHISPER_VER"
            printf "Libs: -L\${libdir} -lwhisper"
            for f in "$DEPS_PREFIX"/lib/libggml*.so; do
              [ -e "$f" ] || continue
              libname=$(basename "$f" .so)
              printf " -l${libname#lib}"
            done
            echo ""
            echo "Cflags: -I\${includedir}"
          } > "$PC_FILE"

      - name: Verify whisper build
        run: |
          export PKG_CONFIG_PATH="$DEPS_PREFIX/lib/pkgconfig"
          export PKG_CONFIG_LIBDIR="$DEPS_PREFIX/lib/pkgconfig"
          echo "=== Files in deps ==="
          find "$DEPS_PREFIX" -type f | sort
          echo "=== Header files ==="
          ls -la "$DEPS_PREFIX/include/"
          echo "=== pkg-config test ==="
          pkg-config --modversion whisper
          pkg-config --exists 'whisper >= 1.7.5' && echo "Version check PASS" || echo "Version check FAIL"

      - name: Clean before configure
        working-directory: ffmpeg-src
        run: |
          make distclean || true
          git clean -xdf || true

      - name: Configure FFmpeg for ${{ matrix.abi }} with whisper
        working-directory: ffmpeg-src
        run: |
          set -euo pipefail
          export PKG_CONFIG_PATH="$DEPS_PREFIX/lib/pkgconfig"
          export PKG_CONFIG_LIBDIR="$DEPS_PREFIX/lib/pkgconfig"
          mkdir -p "../android-build/${{ matrix.abi }}"
          NEON_FLAG=""
          if [ "$ARCH" = "arm64" ] || [ "$ARCH" = "arm" ]; then
            NEON_FLAG="--enable-neon"
          fi
          ./configure \
            --prefix="$PWD/../android-build/${{ matrix.abi }}" \
            --target-os=android \
            --arch="$ARCH" \
            --cpu="$CPU" \
            --cross-prefix="$CROSS_PREFIX" \
            --cc="$CC" \
            --ar="$AR" \
            --ranlib="$RANLIB" \
            --strip="$STRIP" \
            --nm="$NM" \
            --pkg-config="$(which pkg-config)" \
            --enable-cross-compile \
            --enable-shared \
            --disable-static \
            --disable-doc \
            --disable-programs \
            --enable-pic \
            --disable-debug \
            $NEON_FLAG \
            --enable-whisper \
            --extra-ldflags="-Wl,-z,max-page-size=16384"

      - name: Build FFmpeg for ${{ matrix.abi }}
        working-directory: ffmpeg-src
        run: |
          make -j"$(nproc)"
          make install

      - name: Generate ffmpeg_delegate.c (ffmpeg_main wrapper)
        working-directory: ffmpeg-src
        run: |
          cat > fftools/ffmpeg_delegate.c <<'EOF'
          extern int ffmpeg_real_main(int argc, char **argv);
          int ffmpeg_main(int argc, char **argv) { return ffmpeg_real_main(argc, argv); }
          EOF
          echo "ffmpeg_delegate.c generated."

      - name: Compile all traditional ffmpeg CLI C files for ${{ matrix.abi }}
        working-directory: ffmpeg-src
        run: |
          # 只编译ffmpeg.c及其传统依赖，排除ffmpeg_dec.c等modular cli文件，避免stdhbit.h问题
          SRC_FILES="ffmpeg.c cmdutils.c ffmpeg_filter.c ffmpeg_opt.c ffmpeg_hw.c ffmpeg_delegate.c"
          for f in $SRC_FILES; do
            if [[ "$f" == "ffmpeg.c" ]]; then
              $CC -fPIC -Dmain=ffmpeg_real_main -I. -Ifftools -c fftools/$f -o fftools/${f%.c}.o
            else
              $CC -fPIC -I. -Ifftools -c fftools/$f -o fftools/${f%.c}.o
            fi
          done

      - name: Collect all necessary fftools object files
        working-directory: ffmpeg-src
        run: |
          OBJ_FILES=""
          for f in ffmpeg cmdutils ffmpeg_filter ffmpeg_opt ffmpeg_hw ffmpeg_delegate; do
            OBJ_FILES="$OBJ_FILES fftools/$f.o"
          done
          echo $OBJ_FILES > fftools/ffmpeg_objs.list

      - name: Link libffmpeg_entry.so (export ffmpeg_main)
        working-directory: ffmpeg-src
        run: |
          OUT_LIB="$PWD/../android-build/${{ matrix.abi }}/lib"
          OUT_INC="$PWD/../android-build/${{ matrix.abi }}/include"
          mkdir -p "$OUT_LIB" "$OUT_INC"
          OBJ_FILES=$(cat fftools/ffmpeg_objs.list)
          $CC -shared -o "$OUT_LIB/libffmpeg_entry.so" \
            $OBJ_FILES \
            -L"$PWD/../android-build/${{ matrix.abi }}/lib" \
            -lavfilter -lavformat -lavdevice -lswscale -lavcodec -lswresample -lavutil \
            -lm -lz -llog \
            -Wl,-z,max-page-size=16384 -Wl,--allow-multiple-definition
          cat > "$OUT_INC/ffmpeg_entry.h" <<'EOF'
          #ifndef FFMPEG_ENTRY_H
          #define FFMPEG_ENTRY_H
          #ifdef __cplusplus
          extern "C" {
          #endif
          int ffmpeg_main(int argc, char **argv);
          #ifdef __cplusplus
          }
          #endif
          #endif
          EOF

      - name: Copy config.h
        working-directory: ffmpeg-src
        run: cp config.h "../android-build/${{ matrix.abi }}/config.h"

      - name: Copy whisper/ggml runtime so to output
        run: |
          for f in android-deps/${{ matrix.abi }}/lib/libwhisper*.so android-deps/${{ matrix.abi }}/lib/libggml*.so; do
            [ -f "$f" ] && cp "$f" android-build/${{ matrix.abi }}/lib/
          done

      - name: Upload ${{ matrix.abi }} build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-whisper-android-${{ matrix.abi }}
          path: android-build/${{ matrix.abi }}"
